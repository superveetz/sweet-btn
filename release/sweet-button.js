!function(e){var t=function(){function t(n,i){var a=this;this.hasChildElem=!1,this["on-load"]="",this["scroll-in"]="",this["scroll-in-animation-duration"]="",this["scroll-in-animation-delay"]="",this["scroll-in-animation-iteration-count"]="",this["scroll-out"]="",this["scroll-out-animation-duration"]="",this["scroll-out-animation-delay"]="",this["scroll-out-animation-iteration-count"]="",this["glyph-size"]="",this["glyph-color"]="",this["glyph-classes"]="",this["glyph-click"]="",this["glyph-click-animation-duration"]="",this["glyph-click-animation-delay"]="",this["glyph-click-animation-iteration-count"]="",this["glyph-mouse-enter"]="",this["glyph-mouse-enter-animation-duration"]="",this["glyph-mouse-enter-animation-delay"]="",this["glyph-mouse-enter-animation-iteration-count"]="",this["glyph-mouse-leave"]="",this["glyph-mouse-leave-animation-duration"]="",this["glyph-mouse-leave-animation-delay"]="",this["glyph-mouse-leave-animation-iteration-count"]="",this["element-events"]={activeClassCount:{},isClickOccuring:!1,isMouseEnterOccuring:!1,isMouseLeaveOccuring:!1,isScrollInOccuring:!1,isScrollOutOccuring:!1,click:[],"mouse-enter":[],"mouse-leave":[],"scroll-in":[],"scroll-out":[]},this.shape=[{"shape-1":"","shape-1-size":"","shape-1-background":"","shape-1-zIndex":"","shape-1-mouse-enter":"","shape-1-mouse-enter-animation-duration":"","shape-1-mouse-enter-animation-delay":"","shape-1-mouse-enter-animation-iteration-count":"","shape-1-mouse-leave":"","shape-1-mouse-leave-animation-duration":"","shape-1-mouse-leave-animation-delay":"","shape-1-mouse-leave-animation-iteration-count":"","shape-1-click":"","shape-1-click-animation-duration":"","shape-1-click-animation-delay":"","shape-1-click-animation-iteration-count":""},{"shape-2":"","shape-2-size":"","shape-2-background":"","shape-2-zIndex":"","shape-2-mouse-enter":"","shape-2-mouse-enter-animation-duration":"","shape-2-mouse-enter-animation-delay":"","shape-2-mouse-enter-animation-iteration-count":"","shape-2-mouse-leave":"","shape-2-mouse-leave-animation-duration":"","shape-2-mouse-leave-animation-delay":"","shape-2-mouse-leave-animation-iteration-count":"","shape-2-click":"","shape-2-click-animation-duration":"","shape-2-click-animation-delay":"","shape-2-click-animation-iteration-count":""},{"shape-3":"","shape-3-size":"","shape-3-background":"","shape-3-zIndex":"","shape-3-mouse-enter":"","shape-3-mouse-enter-animation-duration":"","shape-3-mouse-enter-animation-delay":"","shape-3-mouse-enter-animation-iteration-count":"","shape-3-mouse-leave":"","shape-3-mouse-leave-animation-duration":"","shape-3-mouse-leave-animation-delay":"","shape-3-mouse-leave-animation-iteration-count":"","shape-3-click":"","shape-3-click-animation-duration":"","shape-3-click-animation-delay":"","shape-3-click-animation-iteration-count":""},{"shape-4":"","shape-4-size":"","shape-4-background":"","shape-4-zIndex":"","shape-4-mouse-enter":"","shape-4-mouse-enter-animation-duration":"","shape-4-mouse-enter-animation-delay":"","shape-4-mouse-enter-animation-iteration-count":"","shape-4-mouse-leave":"","shape-4-mouse-leave-animation-duration":"","shape-4-mouse-leave-animation-delay":"","shape-4-mouse-leave-animation-iteration-count":"","shape-4-click":"","shape-4-click-animation-duration":"","shape-4-click-animation-delay":"","shape-4-click-animation-iteration-count":""},{"shape-5":"","shape-5-size":"","shape-5-background":"","shape-5-zIndex":"","shape-5-mouse-enter":"","shape-5-mouse-enter-animation-duration":"","shape-5-mouse-enter-animation-delay":"","shape-5-mouse-enter-animation-iteration-count":"","shape-5-mouse-leave":"","shape-5-mouse-leave-animation-duration":"","shape-5-mouse-leave-animation-delay":"","shape-5-mouse-leave-animation-iteration-count":"","shape-5-click":"","shape-5-click-animation-duration":"","shape-5-click-animation-delay":"","shape-4-click-animation-iteration-count":""}],this.shapeScale={xs:{width:30,height:30},sm:{width:45,height:45},md:{width:60,height:60},lg:{width:75,height:75},xl:{width:90,height:90}},this.createHexagon=function(e,t){var n=e["shape-"+t+"-size"].length?e["shape-"+t+"-size"]:"xs",i=a.shapeScale[n].width,o=i/10,s=a.shapeScale[n].height,l=s/10,r=""+-1*(i/2+o),u=""+-1*(s/2+l),c=e["shape-"+t+"-click"],m=e["shape-"+t+"-mouse-enter"],h=e["shape-"+t+"-mouse-leave"],p=document.createElementNS("http://www.w3.org/2000/svg","svg"),d=c.length?"shape-"+t+"-click-"+c:"",v=m.length?"shape-"+t+"-mouse-enter-"+m:"",g=h.length?"shape-"+t+"-mouse-leave-"+h:"",f=d+" "+v+" "+g;p.setAttribute("class",f),p.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink"),p.setAttribute("viewBox","0 0 "+i/2+" "+s/2),p.setAttribute("fill",e["shape-"+t+"-background"]),p.setAttribute("stroke","black"),p.setAttribute("stroke-width",s/100+"px"),p.setAttribute("z-index",e["shape-"+t+"-zIndex"]),p.setAttribute("width",i+2*o+"px"),p.setAttribute("height",s+2*l+"px"),p.setAttribute("style","margin-left: "+r+"px; margin-top: "+u+"px;");var y=document.createElementNS("http://www.w3.org/2000/svg","polygon"),C=i/100,w=s/100,b=[46*C+" "+37.5*w,25*C+" "+46*w,4*C+" "+37.5*w,4*C+" "+12.5*w,25*C+" "+4*w,46*C+" "+12.5*w];return y.setAttributeNS(null,"points",b.join(", ")),p.appendChild(y),p},this.createCircle=function(e,t){var n=e["shape-"+t+"-size"].length?e["shape-"+t+"-size"]:"xs",i=1.14*a.shapeScale[n].width,o=i/10,s=1.14*a.shapeScale[n].height,l=s/10,r=-1*(i/2+o),u=-1*(s/2+l),c=e["shape-"+t+"-click"],m=e["shape-"+t+"-mouse-enter"],h=e["shape-"+t+"-mouse-leave"],p=document.createElementNS("http://www.w3.org/2000/svg","svg"),d=c.length?"shape-"+t+"-click-"+c:"",v=m.length?"shape-"+t+"-mouse-enter-"+m:"",g=h.length?"shape-"+t+"-mouse-leave-"+h:"",f=d+" "+v+" "+g;p.setAttribute("class",f),p.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink"),p.setAttribute("viewBox","0 0 "+i/2+" "+s/2),p.setAttribute("fill",e["shape-"+t+"-background"]),p.setAttribute("stroke","black"),p.setAttribute("stroke-width",s/100+"px"),p.setAttribute("z-index",e["shape-"+t+"-zIndex"]),p.setAttribute("width",i+2*o+"px"),p.setAttribute("height",s+2*l+"px"),p.setAttribute("style","margin-left: "+r+"px; margin-top: "+u+"px;");var y=document.createElementNS("http://www.w3.org/2000/svg","ellipse");y.setAttribute("fill",e["shape-"+t+"-background"]);return y.setAttribute("cx",""+(.28*i-.28*o)),y.setAttribute("cy",""+(.28*s-.28*l)),y.setAttribute("rx",""+i/5),y.setAttribute("ry",""+s/5),p.appendChild(y),p},this.createSquare=function(e,t){var n=e["shape-"+t+"-size"].length?e["shape-"+t+"-size"]:"xs",i=a.shapeScale[n].width,o=i/10,s=i+2*o,l=a.shapeScale[n].height,r=l/10,u=l+2*r,c=""+-1*(i/2+o),m=""+-1*(l/2+r),h=e["shape-"+t+"-click"],p=e["shape-"+t+"-mouse-enter"],d=e["shape-"+t+"-mouse-leave"],v=document.createElementNS("http://www.w3.org/2000/svg","svg"),g=h.length?"shape-"+t+"-click-"+h:"",f=p.length?"shape-"+t+"-mouse-enter-"+p:"",y=d.length?"shape-"+t+"-mouse-leave-"+d:"",C=g+" "+f+" "+y;v.setAttribute("class",C),v.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink"),v.setAttribute("viewBox","0 0 "+i/2+" "+l/2),v.setAttribute("fill",e["shape-"+t+"-background"]),v.setAttribute("stroke","black"),v.setAttribute("stroke-width",l/100+"px"),v.setAttribute("z-index",e["shape-"+t+"-zIndex"]),v.setAttribute("width",i+2*o+"px"),v.setAttribute("height",l+2*r+"px"),v.setAttribute("style","margin-left: "+c+"px; margin-top: "+m+"px;");var w=document.createElementNS("http://www.w3.org/2000/svg","rect");return w.setAttribute("width",""+(s/2-2*o)),w.setAttribute("height",""+(u/2-2*r)),w.setAttribute("x",""+o/2),w.setAttribute("y",""+r/2),v.appendChild(w),v},this.parseBtnAttributes=function(e,t){for(var n,i,o,s,l,r=e.attributes,u=0;u<r.length;u++)"length"!=(n=r[u].name)&&(i=n.indexOf("data-"),-1!=i&&(n=n.substring("data-".length,n.length)),o=n.indexOf(t),-1!=o&&(n=n.substring(t.length+1,n.length)),s=n.match(/\d+/g),s?(l=parseFloat(s[0])-1,void 0!=a.shape[l][n]?(a.shape[l][n]=r[u].value,a.shape[l]["shape-"+(l+1)+"-zIndex"]=l+1):void 0==a.shape[l][n]&&-1!=o&&console.debug("SweetButton: ",n,"is not supported, the maximum number of layered shapes is 5.")):void 0!=a[n]?a[n]=r[u].value:void 0==a[n]&&-1!=o&&console.debug("SweetButton: ",n,"is not supported, please visit the documentation for a complete list of valid attributes."))},this.createShapes=function(e){var t,n,i,o,s;if(a["scroll-out"]){var l={activeClassCount:{}};t=a["scroll-out"],n=a["scroll-out-animation-duration"],i=a["scroll-out-animation-delay"],o=a["scroll-out-animation-iteration-count"],l.scrollOutLastPos=0,l.selector="scroll-out-"+t,"infinite"==o&&(o=void 0,console.debug('SweetButton: "infinite" is not supported as an animation-iteration-count property.')),l.animationIterationCount=o||1,l.animationClass=t||"",l.animationDuration=n||1e3,l.animationDelay=i||0,a["element-events"]["scroll-out"].push(l)}if(a["scroll-in"]){var l={activeClassCount:{}};t=a["scroll-in"],n=a["scroll-in-animation-duration"],i=a["scroll-in-animation-delay"],o=a["scroll-in-animation-iteration-count"],l.scrollInLastPos=0,l.selector="scroll-in-"+t,"infinite"==o&&(o=void 0,console.debug('SweetButton: "infinite" is not supported as an animation-iteration-count property.')),l.animationIterationCount=o||1,l.animationClass=t||"",l.animationDuration=n||1e3,l.animationDelay=i||0,a["element-events"]["scroll-in"].push(l)}for(var r,u,c=0,m=a.shape.length;c<m;c++)if(a.shape[c]["shape-"+(c+1)])if(r=a.shape[c],u=r["shape-"+(c+1)],a.shapeDictionary[u]){var h=a.shapeDictionary[u](r,c+1);if(h.setAttribute("class",h.getAttribute("class")+" animated"),console.log("svg clases: ",h.getAttribute("class")),r["shape-"+(c+1)+"-click"]){var l={activeClassCount:{}};t=r["shape-"+(c+1)+"-click"],n=r["shape-"+(c+1)+"-click-animation-duration"],i=r["shape-"+(c+1)+"-click-animation-delay"],o=r["shape-"+(c+1)+"-click-animation-iteration-count"],l.selector="shape-"+(c+1)+"-click-"+t,"infinite"==o&&(o=void 0,console.debug('SweetButton: "infinite" is not supported as an animation-iteration-count property.')),l.animationIterationCount=o||1,l.animationClass=t||"",l.animationDuration=n||1e3,l.animationDelay=i||0,a["element-events"].click.push(l)}if(r["shape-"+(c+1)+"-mouse-enter"]){var l={activeClassCount:{}};t=r["shape-"+(c+1)+"-mouse-enter"],n=r["shape-"+(c+1)+"-mouse-enter-animation-duration"],i=r["shape-"+(c+1)+"-mouse-enter-animation-delay"],o=r["shape-"+(c+1)+"-mouse-enter-animation-iteration-count"],l.selector="shape-"+(c+1)+"-mouse-enter-"+t,"infinite"==o&&(o=void 0,console.debug('SweetButton: "infinite" is not supported as an animation-iteration-count property.')),l.animationClass=t||"",l.animationDuration=n||1e3,l.animationDelay=i||0,l.animationIterationCount=o||1,s=a["element-events"].activeClassCount[l.animationClass],s||(a["element-events"].activeClassCount[l.animationClass]=0),a["element-events"]["mouse-enter"].push(l)}if(r["shape-"+(c+1)+"-mouse-leave"]){var l={activeClassCount:{}};t=r["shape-"+(c+1)+"-mouse-leave"],n=r["shape-"+(c+1)+"-mouse-leave-animation-duration"],i=r["shape-"+(c+1)+"-mouse-leave-animation-delay"],o=r["shape-"+(c+1)+"-mouse-leave-animation-iteration-count"],"infinite"==o&&(o=void 0,console.debug('SweetButton: "infinite" is not supported as an animation-iteration-count property.')),l.selector="shape-"+(c+1)+"-mouse-leave-"+t,l.animationIterationCount=o||1,l.animationClass=t||"",l.animationDuration=n||1e3,l.animationDelay=i||0,s=a["element-events"].activeClassCount[l.animationClass],s||(a["element-events"].activeClassCount[l.animationClass]=0),a["element-events"]["mouse-leave"].push(l)}e.insertAdjacentElement("beforeend",h)}else console.debug("SweetButton: ",u,"is not supported, view the documentation for the completelist of shape types.")},this.createGlyphIcon=function(e,t){if(a["glyph-classes"]){var n=document.createElement("i");n.className=a["glyph-classes"];var i=a["glyph-size"].length?a["glyph-size"]:"xs",o=(a.shapeScale[i].width,a.shapeScale[i].height);if(n.style.fontSize=o/2+"px",n.style.lineHeight=o/2+"px",n.style.color=a["glyph-color"],a.hasChildElem){var s=o/2,l=a.childWidth;a.shapeScale[i].width;n.style.marginTop="-"+s/2+"px",n.style.marginLeft="-"+(s/2+s/8+l/2+2)+"px"}else{var s=o/2;n.style.marginTop="-"+s/2+"px",n.style.marginLeft="-"+(s/2+s/8)+"px"}var r=void 0,u=void 0,c=void 0,m=void 0,h=void 0;if(a["glyph-click"]){var p={};r=a["glyph-click"],u=a["glyph-click-animation-duration"],c=a["glyph-click-animation-delay"],m=a["glyph-click-animation-iteration-count"],"infinite"==m&&(console.debug("SweetButton: ",'"infinite" is not supported as an animation-iteration-count property.an animation-iteration-count'),m=void 0),p.selector="glyph-click-"+r,n.className+=" "+p.selector,p.animationClass=r||"",p.animationDuration=u||1e3,p.animationDelay=c||0,p.animationIterationCount=m||1,a["element-events"].click.push(p)}if(a["glyph-click"]&&a.hasChildElem){var p={};r=a["glyph-click"],u=a["glyph-click-animation-duration"],c=a["glyph-click-animation-delay"],m=a["glyph-click-animation-iteration-count"],"infinite"==m&&(console.debug("SweetButton: ",'"infinite" is not supported as an animation-iteration-count property.an animation-iteration-count'),m=void 0),p.selector=t+"-inner-text",p.animationClass=r||"",p.animationDuration=u||1e3,p.animationDelay=c||0,p.animationIterationCount=m||1,a["element-events"].click.push(p)}if(a["glyph-mouse-enter"]){var p={};r=a["glyph-mouse-enter"],u=a["glyph-mouse-enter-animation-duration"],c=a["glyph-mouse-enter-animation-delay"],m=a["glyph-mouse-enter-animation-iteration-count"],"infinite"==m&&(console.debug("SweetButton: ",'"infinite" is not supported as an animation-iteration-count property.an animation-iteration-count'),m=void 0),p.selector="glyph-mouse-enter-"+r,n.className+=" "+p.selector,p.animationClass=r||"",p.animationDuration=u||1e3,p.animationDelay=c||0,p.animationIterationCount=m||1,h=a["element-events"].activeClassCount[p.animationClass],h||(a["element-events"].activeClassCount[p.animationClass]=0),a["element-events"]["mouse-enter"].push(p)}if(a["glyph-mouse-enter"]&&a.hasChildElem){var p={};r=a["glyph-mouse-enter"],u=a["glyph-mouse-enter-animation-duration"],c=a["glyph-mouse-enter-animation-delay"],m=a["glyph-mouse-enter-animation-iteration-count"],"infinite"==m&&(console.debug("SweetButton: ",'"infinite" is not supported as an animation-iteration-count property.an animation-iteration-count'),m=void 0),p.selector=t+"-inner-text",p.animationClass=r||"",p.animationDuration=u||1e3,p.animationDelay=c||0,p.animationIterationCount=m||1,h=a["element-events"].activeClassCount[p.animationClass],h||(a["element-events"].activeClassCount[p.animationClass]=0),a["element-events"]["mouse-enter"].push(p)}if(a["glyph-mouse-leave"]){var p={};r=a["glyph-mouse-leave"],u=a["glyph-mouse-leave-animation-duration"],c=a["glyph-mouse-leave-animation-delay"],m=a["glyph-mouse-leave-animation-iteration-count"],"infinite"==m&&(console.debug("SweetButton: ",'"infinite" is not supported as an animation-iteration-count property.an animation-iteration-count'),m=void 0),p.selector="glyph-mouse-leave-"+r,n.className+=" "+p.selector,p.animationClass=r||"",p.animationDuration=u||1e3,p.animationDelay=c||0,p.animationIterationCount=m||1,h=a["element-events"].activeClassCount[p.animationClass],h||(a["element-events"].activeClassCount[p.animationClass]=0),a["element-events"]["mouse-leave"].push(p)}if(a["glyph-mouse-leave"]&&a.hasChildElem){var p={};r=a["glyph-mouse-leave"],u=a["glyph-mouse-leave-animation-duration"],c=a["glyph-mouse-leave-animation-delay"],m=a["glyph-mouse-leave-animation-iteration-count"],"infinite"==m&&(console.debug("SweetButton: ",'"infinite" is not supported as an animation-iteration-count property.an animation-iteration-count'),m=void 0),p.selector=t+"-inner-text",p.animationClass=r||"",p.animationDuration=u||1e3,p.animationDelay=c||0,p.animationIterationCount=m||1,h=a["element-events"].activeClassCount[p.animationClass],h||(a["element-events"].activeClassCount[p.animationClass]=0),a["element-events"]["mouse-leave"].push(p)}e.appendChild(n)}},this.createEvents=function(e){a["element-events"].click.length&&e.addEventListener("click",t.HandleClickEvent(e,a["element-events"])),a["element-events"]["mouse-enter"].length&&(e.addEventListener("mouseenter",t.HandleMouseEnterEvent(e,a["element-events"])),e.addEventListener("touchstart",t.HandleMouseEnterEvent(e,a["element-events"]))),a["element-events"]["mouse-leave"].length&&e.addEventListener("mouseleave",t.HandleMouseLeaveEvent(e,a["element-events"])),a["element-events"]["scroll-in"].length&&window.addEventListener("scroll",t.HandleScrollInEvent(e,a["element-events"],!1)),a["element-events"]["scroll-out"].length&&window.addEventListener("scroll",t.HandleScrollOutEvent(e,a["element-events"]))},this.parseBtnInnerHtml=function(t,n){var i=e(t).children();if(0!=i.length){a.hasChildElem=!0;var o=i[0];e(o).addClass(n+"-inner-text");var s=e(o).width();a.childWidth=s;var l=e(o).height();for(var r in a.shapeScale)a.shapeScale[r].width+=1.5*s,a.shapeScale[r].height+=l/2;if(a["glyph-classes"]){var u=a["glyph-size"].length?a["glyph-size"]:"xs",c=a.shapeScale[u].width;e(o).css({position:"absolute",top:"50%",left:"50%",marginTop:l/2.25*-1,marginLeft:-1*(s/2-c/8-2)})}else e(o).css({position:"absolute",top:"50%",left:"50%",marginTop:l/2.25*-1,marginLeft:s/2*-1});return o}},this.createDivContainer=function(t,n){var i,o,s,l;e(t).hasClass(n+"-xl")?(i=a.shapeScale.xl.width,s=a.shapeScale.xl.height):e(t).hasClass(n+"-lg")?(i=a.shapeScale.lg.width,s=a.shapeScale.lg.height):e(t).hasClass(n+"-md")?(i=a.shapeScale.md.width,s=a.shapeScale.md.height):e(t).hasClass(n+"-sm")?(i=a.shapeScale.sm.width,s=a.shapeScale.sm.height):(e(t).hasClass(n+"-xs"),i=a.shapeScale.xs.width,s=a.shapeScale.xs.height),o=i/10,l=s/10,a["on-load"]&&(e(t).addClass("animated "+a["on-load"]),a["element-events"].isLoadOccuring=!0,setTimeout(function(){e(t).removeClass(""+a["on-load"]),a["element-events"].isLoadOccuring=!1},1e3)),e(t).css({height:s+2*l+"px",width:i+2*o+"px"});var r=document.createElement("div");return r.setAttribute("class",n+"-wrap"),r.style.height="100%",r.style.width="100%",r},this.shapeDictionary={hexagon:this.createHexagon,square:this.createSquare,circle:this.createCircle},this.parseBtnAttributes(n,i);var o=this.parseBtnInnerHtml(n,i),s=this.createDivContainer(n,i);o&&e(s).append(o),this.createShapes(s),this.createGlyphIcon(s,i),this.createEvents(s),n.insertAdjacentElement("beforeend",s),e(n).css({visibility:"visible"})}return t.AddStaticStyles=function(e){void 0===e&&(e="sweet-btn");var t=e+"-styles",n=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.setAttribute("rel","stylesheet"),i.setAttribute("media","only screen"),i.setAttribute("id",t),i.setAttribute("type","text/css");var a="          ."+e+" {\n                position: relative;\n                display: inline-block;\n                visibility: hidden;\n                cursor: pointer;\n                -webkit-touch-callout: text;\n                user-select: text;\n                -webkit-user-select: text;\n                -moz-user-select: text;\n                -ms-user-select: text;\n                -o-user-select: text;\n                vertical-align: middle;\n                text-align: center;\n            }\n            \n            ."+e+" ."+e+"-wrap svg {\n                pointer-events: none;\n                overflow: visible;\n                -webkit-back-face-visibility: hidden;\n                backface-visibility: hidden;\n                z-index: 100;\n                display: inline-block;\n                position: absolute;\n                left:50%;\n                top: 50%;\n                -webkit-animation-fill-mode: both;\n                animation-fill-mode: both;\n            }\n\n            ."+e+" ."+e+"-wrap svg rect,\n            ."+e+" ."+e+"-wrap svg circle,\n            ."+e+" ."+e+"-wrap svg polygon,\n            ."+e+" ."+e+"-wrap svg elipsis {\n                pointer-events: none;\n            }\n            \n            ."+e+" ."+e+"-wrap i {\n                z-index: 150;\n                display: inline-block;\n                position: absolute;\n                left: 50%;\n                top: 50%;\n                pointer-events: none;\n\n                -webkit-text-stroke-color: black;\n                -webkit-text-stroke-width: 0.5px;\n                -webkit-tap-highlight-color: transparent;\n\n            }\n\n            ."+e+" ."+e+"-inner-text {\n                    display: inline-block;\n                    z-index: 150;\n                    whiteSpace: pre;\n                    margin: 0;\n                    padding: 0;\n                    \n                    -webkit-touch-callout: text;\n                    user-select: text;\n                    -webkit-user-select: text;\n                    -moz-user-select: text;\n                    -ms-user-select: text;\n                    -o-user-select: text;\n            }\n            ";i.appendChild(document.createTextNode(a)),n.appendChild(i)},t.RemoveEventAnimationClasses=function(t,n,i){var a;i.forEach(function(i,o){n[i]&&n[i].length&&n[i].forEach(function(n,i){a=e(t).find("."+n.selector),a.hasClass(n.animationClass)&&(a.removeClass(n.animationClass),a.css({"-webkit-animation-duration":"","animation-duration":""}))})})},t.AddEventAnimationClasses=function(t,n,i){var a;i.forEach(function(i,o){n[i]&&n[i].length&&n[i].forEach(function(n,i){a=e(t).find("."+n.selector),a.hasClass(n.animationClass)||(a.addClass(n.animationClass),a.css({"-webkit-animation-duration":n.animationDuration+"ms","animation-duration":n.animationDuration+"ms"}))})})},t.HandleMouseEnterEvent=function(t,n){return function(){if(n.isOnLoadOccuring||n.isMouseEnterOccuring||n.isMouseLeaveOccuring||n.isClickOccuring||n.isScrollInOccuring||n.isScrollOutOccuring)return!1;n.isMouseEnterOccuring=!0;var i;async.each(n["mouse-enter"],function(n,a){async.waterfall([function(a){return i=e(t).find("."+n.selector),i.css({"-webkit-animation-duration":n.animationDuration+"ms","animation-duration":n.animationDuration+"ms","-webkit-animation-iteration-count":n.animationIterationCount,"animation-iteration-count":n.animationIterationCount}),a(null,i)},function(e,t){setTimeout(function(){return e.addClass(""+n.animationClass),t(null,e)},n.animationDelay)},function(e,t){setTimeout(function(){return e.removeClass(""+n.animationClass),t(null,e)},n.animationIterationCount*n.animationDuration)}],a)},function(e){e&&console.debug("err:",e),n.isMouseEnterOccuring=!1})}},t.HandleMouseLeaveEvent=function(n,i){return function(){if(i.isOnLoadOccuring||i.isMouseLeaveOccuring||i.isMouseEnterOccuring||i.isClickOccuring||i.isScrollInOccuring||i.isScrollOutOccuring)return!1;i.isMouseLeaveOccuring=!0;var a;async.each(i["mouse-leave"],function(o,s){async.waterfall([function(t){return a=e(n).find("."+o.selector),a.css({"-webkit-animation-duration":o.animationDuration+"ms","animation-duration":o.animationDuration+"ms","-webkit-animation-iteration-count":o.animationIterationCount,"animation-iteration-count":o.animationIterationCount}),t(null,a)},function(e,t){setTimeout(function(){return i.activeClassCount[""+o.animationClass]++,e.hasClass(""+o.animationClass)||e.addClass(""+o.animationClass),t(null,e)},o.animationDelay)},function(e,a){async.parallel([function(e){setTimeout(function(){return i.isMouseLeaveOccuring=!1,t.HandleMouseEnterEvent(n,i)(),e()},o.animationDuration*o.animationIterationCount-100)},function(t){setTimeout(function(){return i.activeClassCount[""+o.animationClass]--,e.removeClass(""+o.animationClass),a(null,e)},o.animationDuration*o.animationIterationCount)}],a)}],s)},function(e){e&&console.debug("err:",e)})}},t.HandleScrollOutEvent=function(n,i){return function(){function a(){i.isScrollOutOccuring=!0;var a;async.each(i["scroll-out"],function(o,s){async.waterfall([function(t){return a=e(n),a.css({"-webkit-animation-duration":o.animationDuration+"ms","animation-duration":o.animationDuration+"ms","-webkit-animation-iteration-count":o.animationIterationCount,"animation-iteration-count":o.animationIterationCount}),t(null,a)},function(e,t){setTimeout(function(){return e.addClass(""+o.animationClass),t(null,e)},o.animationDelay)},function(e,a){async.parallel([function(e){setTimeout(function(){return i.isScrollOutOccuring=!1,t.HandleScrollInEvent(n,i,!0)(),e()},o.animationDuration*o.animationIterationCount-100)},function(t){setTimeout(function(){return e.removeClass(""+o.animationClass),a(null,e)},o.animationDuration*o.animationIterationCount)}])}],s)},function(e){e&&console.debug("err:",e)})}var o=i.scrollOutLastPos,s=e(window).scrollTop();if(i.scrollOutLastPos=s,i.isOnLoadOccuring||i.isClickOccuring||i.isMouseEnterOccuring||i.isMouseLeaveOccuring||i.isScrollInOccuring||i.isScrollOutOccuring)return!1;var l=e(n).offset(),r=e(n).height();s<o?s+window.innerHeight>l.top+r-r/3&&s+window.innerHeight<l.top+r+r/3&&a():s>l.top-r-r/3&&s<l.top+r/3&&a()}},t.HandleScrollInEvent=function(t,n,i){return function(){function a(){n.isScrollInOccuring=!0;var i;async.each(n["scroll-in"],function(n,a){async.waterfall([function(a){return i=e(t),i.css({"-webkit-animation-duration":n.animationDuration+"ms","animation-duration":n.animationDuration+"ms","-webkit-animation-iteration-count":n.animationIterationCount,"animation-iteration-count":n.animationIterationCount}),a(null,i)},function(e,t){setTimeout(function(){return e.addClass(""+n.animationClass),t(null,e)},n.animationDelay)},function(e,t){setTimeout(function(){return e.removeClass(""+n.animationClass),t(null,e)},n.animationDuration*n.animationIterationCount)}],a)},function(e){e&&console.debug("err:",e),n.isScrollInOccuring=!1})}if(i)return a();var o=n.scrollInLastPos,s=e(window).scrollTop();if(n.scrollInLastPos=s,n.isOnLoadOccuring||n.isClickOccuring||n.isMouseEnterOccuring||n.isMouseLeaveOccuring||n.isScrollInOccuring||n.isScrollOutOccuring)return!1;var l=e(t).offset(),r=e(t).height();s>o?s+window.innerHeight>l.top-r/3&&s+window.innerHeight<l.top+r/3&&a():s>l.top+r-r/3&&s<l.top+r+r/3&&a()}},t.HandleClickEvent=function(n,i){return function(){if(i.isClickOccuring)return!1;i.isClickOccuring=!0;var a;async.each(i.click,function(o,s){async.waterfall([function(s){return a=e(n).find("."+o.selector),t.RemoveEventAnimationClasses(n,i,["mouse-enter","mouse-leave","scroll-in","scroll-out"]),a.css({"-webkit-animation-duration":o.animationDuration+"ms","animation-duration":o.animationDuration+"ms","-webkit-animation-iteration-count":o.animationIterationCount,"animation-iteration-count":o.animationIterationCount}),s(null,a)},function(e,t){setTimeout(function(){return e.addClass(""+o.animationClass),t(null,e)},o.animationDelay)},function(e,t){setTimeout(function(){return e.removeClass(""+o.animationClass),t(null,e)},o.animationDuration*o.animationIterationCount)}],s)},function(e){e&&console.debug("err:",e),i.isClickOccuring=!1})}},t}();t.AddStaticStyles(),e.fn.sweetButton=function(e){void 0===e&&(e={className:"sweet-btn"});var n=e.className;return this.each(function(){var e=new t(this,n);console.log("sweetBtn: ",e)})}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
